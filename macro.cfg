####################################################################################
#	                         Main Macro Section 
####################################################################################

####################################################################################
#	                         Beacon: Contact + Scan - Start
####################################################################################

[gcode_macro G32]
description: Perform QGL and adaptive bed mesh calibration
gcode:
  G90
  G1 Z12.0 F2000                                                                                  ; Move Z Axis up
  CLEAN_NOZZLE
  G92 E0                                                                                          ; Reset the extruder's position
  G1 E-4.0 F3600                                                                                  ; Filament retraction
  G28 Z METHOD=CONTACT CALIBRATE=1                                                                ; Calibrate Z offset and Beacon model hot
  QUAD_GANTRY_LEVEL                                                                               ; Gantry levelling
  BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=beacon probe_count=11,11 RUNS=2                            ; Adaptive bed mesh in scan mode
  # BED_MESH_PROFILE LOAD=default                                                                   ; For filament calibration
  CLEAN_NOZZLE
  G90
  G1 Z12.0 F2000                                                                                  ; Move Z Axis up
  G28 Z METHOD=CONTACT CALIBRATE=0                                                                ; Calibrate Z offset only after QGL

#####################################################################################
#	                         Beacon Thermal Expansion Calibration - Start
#################################################################################### 

[gcode_macro BEACON_VARS]
variable_beacon_contact_calibration_temp: 150                                                     ; Nozzle temperature for auto calibration
variable_beacon_contact_expansion_compensation: True                                              ; Enables the nozzle thermal expansion compensation
variable_beacon_contact_expansion_multiplier: 1.865                                               ; Multiplier for the nozzle thermal expansion compensation

# DO NOT MODIFY BELOW
gcode:

[delayed_gcode _BEACON_INIT]
initial_duration: 0.1
gcode:
    # reset nozzle thermal expansion offset
    _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True

[gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET]
variable_reference_z: 0.0
gcode:
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}
	{% set z_hop = (printer.configfile.settings['beacon'].home_z_hop)|float %}
	{% set safe_home_x = (printer.configfile.settings.stepper_x.position_max) /2 %}
	{% set safe_home_y = (printer.configfile.settings.stepper_y.position_max) /2 %}
	
	{% if printer.toolhead.homed_axes != "xyz" %}
    		G28
	{% endif %}

	#QGL if setup
 	{% if printer.quad_gantry_level is defined and not printer.quad_gantry_level.applied %}
        SET_DISPLAY_TEXT MSG="QGL"
        {% if printer.configfile.settings["gcode_macro FAST_QGL"] is defined %}
            {% if printer.configfile.settings['beacon'].default_probe_method != contact %}
                FAST_QGL                                                         
            {% endif %}
        {% else %}
            quad_gantry_level                                                             
        {% endif %}
        G28 Z
	{% endif %}

	#Z_TILT if setup
	{% if printer.z_tilt is defined and not printer.z_tilt.applied %}
        SET_DISPLAY_TEXT MSG="Z-Tilt adjust"                              
        {% if printer.configfile.settings["gcode_macro FAST_Z_TILT"] is defined %}
            {% if printer.configfile.settings['beacon'].default_probe_method != contact %}
                FAST_Z_TILT                                                              
            {% endif %}
        {% else %}
            Z_TILT_ADJUST                                                                  
        {% endif %}
        G28 Z
	{% endif %}

	# settle the mechanics down  
	{% for i in range(10) %}
		beacon_poke speed=3 top=5 bottom=-0.6
	{% endfor %}

	# get and set start temperature offset 
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# get and set start temperature offset 
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# move back to home position
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y}

	# turn heater off
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

			
	# echo results
	_BEACON_NOZZLE_TEMP_OFFSET

[gcode_macro _BEACON_PROBE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}


	# wait for noozle to reach the probing temperature
	RESPOND  MSG="Waiting for nozzle to reach {temp}°C..."
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp} MAXIMUM={temp + 2}

	# wait for temperature to settle down
	RESPOND MSG="Waiting 60s for thermal expansion..."
	G4 P60000

	# probe
	RESPOND MSG="Probing with nozzle temperature {temp}°C..."
	PROBE PROBE_METHOD=contact SAMPLES=5 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median
	G4 P2000 #wait 2 sec so beacon_query returns non inf value
	BEACON_QUERY

	# raise z
	G0 Z5 F{z_speed}

[gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET]
gcode:
	{% set reset = true if params.RESET|default(false)|lower == 'true' else false %}

	# config 
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# beacon config
	{% set beacon_contact_calibration_temp = params.probing_temp|default(150)|int %}
	{% set beacon_contact_expansion_multiplier = printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_multiplier|default(1.0)|float %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	{% if reset %}
		# reset applied offset
		SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE=0

	{% else %}
		{% if beacon_contact_expansion_compensation %}

			# get coefficient value
			{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient|default(0)|float %}

			# get applied offset
			{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

			# get extruder target temperature
			{% set temp = printer['extruder'].target|float %}

			# calculate new offset
			{% set temp_offset = temp - beacon_contact_calibration_temp %}
			{% set expansion_coefficient = nozzle_expansion_coefficient %}
			{% set expansion_offset = beacon_contact_expansion_multiplier * (temp_offset * (expansion_coefficient / 100)) %}

			# set new offset
			{% set new_offset = ((-applied_offset) + expansion_offset) %}
			SET_GCODE_OFFSET Z_ADJUST={new_offset} MOVE=1 SPEED={z_speed}
			SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE={expansion_offset}

			# echo
			RESPOND  MSG={'"Nozzle expansion offset of %.6fmm applied"' % (expansion_offset)}

		{% endif %}
	{% endif %}

[gcode_macro _BEACON_REMOVE_NOZZLE_TEMP_OFFSET]
gcode:
	# config 
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# beacon config
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	{% if beacon_contact_expansion_compensation %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get applied offset
		{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

		# remove applied offset
		SET_GCODE_OFFSET Z_ADJUST={(-applied_offset)} MOVE=0 SPEED={z_speed}

	{% endif %}

[gcode_macro _BEACON_STORE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	#variable file
	{% set svv = printer.save_variables.variables %}

	# get last probe result
	{% set last_z = printer.beacon.last_z_result|default(0)|float %}

	# set temperature offset
	{% if temp == 150 %}
		SET_GCODE_VARIABLE MACRO=BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET"].reference_z|default(0)|float %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient VALUE={(last_z - reference_z)}
	{% endif %}

[gcode_macro _BEACON_NOZZLE_TEMP_OFFSET]
gcode:
	{% set svv = printer.save_variables.variables %}
	RESPOND  MSG={'"expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient}

[gcode_macro BEACON_APPLY_MULTIPLIER]
gcode:

	# beacon config
	{% set beacon_contact_calibration_temp = printer["gcode_macro BEACON_VARS"].beacon_contact_calibration_temp|default(150)|int %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_compensation|default(false) %}

	{% if beacon_contact_expansion_compensation %}
		# variables file
		{% set svv = printer.save_variables.variables %}

		# get coefficient
		{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient|default(0)|float %}

		# get coefficient multiplier
		{% set beacon_contact_expansion_multiplier = svv.nozzle_expansion_coefficient_multiplier|default(1.0)|float %}

		# calculate new multiplier
		{% set print_temp = printer['extruder'].target|float %}
		{% set z_offset = printer.gcode_move.homing_origin.z|float %}
		{% set temp_delta = print_temp - beacon_contact_calibration_temp %}
		{% set coefficient_per_degree = nozzle_expansion_coefficient / 100 %}
		{% set z_offset_per_degree = z_offset / temp_delta %}
		{% set new_multiplier = z_offset_per_degree / coefficient_per_degree %}

		# store new multiplier
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_multiplier VALUE={new_multiplier}

		# console echo
		RESPOND  MSG={'"New multiplier is: %.6f_N_Value has been automatically saved and activated."' % new_multiplier}

	{% endif %}

#####################################################################################
#	                         Beacon Thermal Expansion Calibration - End
#################################################################################### 

#####################################################################################
#	                         Nozzle Scrub - Start
#################################################################################### 
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 248.00
variable_start_y: 288.00
variable_start_z: 2.0
variable_wipe_dist_y: -3.0
variable_wipe_qty: 7
variable_wipe_spd: 45.0
variable_raise_distance: 5.0

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                                                                            ; absolute positioning
 
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 7} Y{start_y - wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x + 7} Y{start_y + wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x + 7} Y{start_y - wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x + 7} Y{start_y + wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x + 7} Y{start_y - wipe_dist_y} F{wipe_spd * 145}
   #WIPE RIGHT
   G1 X{start_x - 7} Y{start_y + wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x - 7} Y{start_y - wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x - 7} Y{start_y + wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x - 7} Y{start_y - wipe_dist_y} F{wipe_spd * 145}
   G1 X{start_x - 7} Y{start_y + wipe_dist_y} F{wipe_spd * 145}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z{raise_distance}
 G1 X150 Y150
 
#####################################################################################
#	                         Nozzle Scrub - End
#################################################################################### 

[gcode_macro HOME_CHECK]
description: Check for home status
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28                                                                          ; Homing all axes
  RESPOND MSG="Printer status: HOMED"
  {% endif %}

####################################################################################
#	                         Speed Test - Start
####################################################################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
####################################################################################
#	                         Speed Test - End
####################################################################################


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
  
[gcode_macro THE_FILTER_STATS]
description: Check for filter status
gcode:
  FILTER_STATS NAME=The_Filter [EXTENDED=1]

[gcode_macro RESET_THE_FILTER]
description: Reset filter status
gcode:
  RESET_FILTER NAME=The_Filter

[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(100)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
  
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(250)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

####################################################################################
#	                      Preheat and Prepare for ABS Printing section - Start
####################################################################################
# [gcode_macro SET_MACRO_VARIABLE]
# description: Set a variable for a specified macro
# gcode:
#     {% set macro_name = params.MACRO %}
#     {% set var_name = params.VARIABLE %}
#     {% set value = params.VALUE | float %}
#     {% set global_ns = namespace(found=false) %}
#     {% for macro in printer %}
#         {% if macro.startswith('gcode_macro ') and macro.split(' ')[1] == macro_name %}
#             {% set global_ns.found = true %}
#             {% set dummy = printer[macro].update({var_name: value}) %}
#         {% endif %}
#     {% endfor %}
#     {% if not global_ns.found %}
#         { action_raise_error("Macro " + macro_name + " not found!") }
#     {% endif %}

[gcode_macro PREHEAT_AND_PREPARE_ABS]
description: Preheat chamber to at least 45°C and stabilize
gcode:
    {% set chamber_temp = printer["temperature_sensor Chamber_Thermistor"].temperature | float | round(1) %}
    RESPOND MSG="Initial chamber temp: {chamber_temp}°C"
    {% if chamber_temp < 45 %}
        RESPOND MSG="Waiting for chamber temp to reach 45°C..."
        TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Thermistor" MINIMUM=45
        RESPOND MSG="Chamber reached 45°C."
    {% else %}
        RESPOND MSG="Chamber temp is {chamber_temp}°C, already at or above 45°C."
    {% endif %}
    RESPOND MSG="Chamber at or above 45°C. Waiting 60s for thermal stabilisation of the bed..."
    
    G4 P60000

####################################################################################
#	                      Preheat and Prepare for ABS Printing section - End
####################################################################################
   
[gcode_macro LOAD_FILAMENT]
description: Loads filament into the single extruder with configurable parameters
variable_load_distance: 30                                                                     ; Distance to load filament into the extruder (mm)
variable_purge_distance: 20                                                                    ; Distance to purge filament after loading (mm)
variable_nozzle_preheat_temp: 250                                                              ; Default preheat temperature (°C)
gcode:
    # Parameters and settings
    {% set load_speed = params.LOAD_SPEED|default(600)|float %}                                ; Speed for loading filament (mm/min)
    {% set purge_speed = params.PURGE_SPEED|default(300)|float %}                              ; Speed for purging filament (mm/min)
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|float %}              ; Target temperature for the nozzle (°C)
    {% set min_temp = params.MIN_TEMP|default(230)|float %}                                    ; Minimum safe temperature for extrusion (°C)
    {% set max_temp = printer.extruder.max_temp|default(260)|float %}                          ; Maximum safe temperature for extruder (°C, fallback to 260)

    # Validate inputs
    {% if load_speed <= 0 %}
        {action_respond_info("Error: LOAD_SPEED must be positive. Using default: 10 mm/s")}
        {% set load_speed = 600 %}
    {% endif %}
    {% if purge_speed <= 0 %}
        {action_respond_info("Error: PURGE_SPEED must be positive. Using default: 5 mm/s")}
        {% set purge_speed = 300 %}
    {% endif %}
    {% if target_temp < min_temp %}
        {action_respond_info("Warning: TARGET_TEMP below MIN_TEMP. Using MIN_TEMP: " ~ min_temp)}
        {% set target_temp = min_temp %}
    {% endif %}

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=load_state

    # Heat the nozzle to the target temperature if required
    {% if printer.extruder.temperature < target_temp %}
        {% if target_temp <= printer.extruder.max_temp %}
            M104 S{target_temp}                                                                   ; Set extruder to target temperature
            M109 S{target_temp}                                                                   ; Wait for extruder to reach target temperature
        {% else %}
            {action_respond_info("Error: TARGET_TEMP exceeds max_temp. Using MIN_TEMP: " ~ min_temp)}
            M104 S{min_temp}                                                                      ; Set extruder to safe minimum temperature
            M109 S{min_temp}                                                                      ; Wait for extruder to reach safe minimum temperature
        {% endif %}
    {% endif %}

    # Begin filament loading process
    G91                                                                                           ; Set relative positioning for extrusion
    G92 E0                                                                                        ; Reset extruder position
    G1 E{load_distance} F{load_speed*60}                                                          ; Load filament at the specified speed (mm/min)
    G1 E{purge_distance} F{purge_speed*60}                                                        ; Purge filament at the specified speed (mm/min)

    # Restore previous state of the printer
    G90                                                                                           ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=load_state

    # Completion message
    M117 Filament load complete

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the extruder with configurable parameters
variable_unload_distance: 150                                                                     ; Distance to retract filament from the extruder (mm)
variable_nozzle_preheat_temp: 250                                                                 ; Default preheat temperature for unloading (°C). 250°C for ABS.
gcode:
	# Parameters and settings
    {% set retract_speed = params.RETRACT_SPEED|default(1800) %}                                  ; Speed for retracting filament (mm/min)
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}                       ; Target temperature for the nozzle (°C).
    {% set min_temp = params.MIN_TEMP|default(250) %}                                             ; Minimum safe temperature for extrusion (°C). 230°C for ABS.
	{% set purge_length = params.PURGE_LENGTH|default(0)|float %}                                 ; Optional purge length (mm)

	# Validate inputs
    {% if retract_speed <= 0 %}
        {action_respond_info("Error: RETRACT_SPEED must be positive. Using default: 30 mm/s")}
        {% set retract_speed = 1800 %}
    {% endif %}
    {% if target_temp < min_temp %}
        {action_respond_info("Warning: TARGET_TEMP below MIN_TEMP. Using MIN_TEMP: " ~ min_temp)}
        {% set target_temp = min_temp %}
    {% endif %}
	
    # Save current state of the printer
    SAVE_GCODE_STATE NAME=unload_state

    # Heat the nozzle to the target temperature if required
    {% if printer.extruder.temperature < target_temp %}
        # Ensure the nozzle is heated to the target temperature or at least the minimum safe temperature
        {% if target_temp >= min_temp %}  
            M104 S{target_temp}                                                                   ; Set extruder to target temperature
            M109 S{target_temp}                                                                   ; Wait for extruder to reach target temperature
        {% else %}
            M104 S{min_temp}                                                                      ; Set extruder to safe minimum temperature
            M109 S{min_temp}                                                                      ; Wait for extruder to reach safe minimum temperature
        {% endif %}
    {% endif %}

    # Begin filament unloading process
    G91                                                                                           ; Set relative positioning for extrusion
    G92 E0                                                                                        ; Reset extruder position
    G1 E25 F300                                                                                   ; Extrude 25 mm at 5 mm/s (300 mm/min)
    G1 E-5 F300                                                                                   ; Retract 5 mm at 5 mm/s (300 mm/min)
    G1 E-10 F900                                                                                  ; Retract 10 mm at 15 mm/s (900 mm/min)
    G1 E-{unload_distance} F{retract_speed}                                                       ; Retract filament at the specified speed

    # Restore previous state of the printer
    G90                                                                                           ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=unload_state

    # Completion message
    M117 Filament unload complete

####################################################################################
#	                      Klipperscreen Macro section 
####################################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  
  # Reset nozzle thermal expansion offset
  {% if printer.configfile.settings.beacon is defined %}
      _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
      _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
  {% endif %}
  
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max position from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 15.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 25.0) %}
      {% set z_safe = 25.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro T0]
gcode:

# [gcode_macro M141]
# gcode:
#    {% set s = params.S|default(0)|float %}
#    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}


